import numpy as np
import math
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.animation as anime
from matplotlib.ticker import MultipleLocator
from matplotlib.ticker import AutoLocator
matplotlib.rcParams['font.sans-serif'] = ['Microsoft JhengHei']  # 或 'SimHei'
matplotlib.rcParams['axes.unicode_minus'] = False  # 正確顯示負號

# Hyperparameters
csv_file = "./cityB.csv"
uid = 1

# Read the CSV file for City 
cityB_raw_df = pd.read_csv(csv_file, header=0, dtype=int)

# Clean the data by removing x or y = 999
cityB_clean_df = cityB_raw_df[(cityB_raw_df['x'] != 999) & (cityB_raw_df['y'] != 999)]
print(cityB_clean_df.tail())
print(f"共有可用{cityB_clean_df.shape[0]}筆資料\n已移除{cityB_raw_df.shape[0] - cityB_clean_df.shape[0]}筆無效資料")

# Create subplot
fig, axs = plt.subplots(2, 2, figsize=(20, 20))

# 全域全時heatmap
axs[0, 0].scatter(cityB_clean_df['x'], cityB_clean_df['y'], alpha=0.05, s=1, c='r')
axs[0, 0].set_title("全域全時Heatmap")
axs[0, 0].set_xlim(1, 200)
axs[0, 0].set_ylim(1, 200)
axs[0, 0].set_aspect('equal')
axs[0, 0].invert_yaxis()
axs[0, 0].grid(True, alpha=0.3)
axs[0, 0].xaxis.set_major_locator(MultipleLocator(10))
axs[0, 0].yaxis.set_major_locator(MultipleLocator(10))

# 單人全時軌跡
person_df = cityB_clean_df[(cityB_clean_df['uid'] == uid)]
# person_df = cityB_clean_df[(cityB_clean_df['uid'] == uid) & (cityB_clean_df['d'] == 0)]
axs[0, 1].plot(person_df['x'], person_df['y'], marker='o', markersize=2, linewidth=1, alpha=0.5, c='r')
axs[0, 1].set_title(f"uid={uid} 的軌跡")
x_min = math.floor(person_df['x'].min())
x_max = math.ceil(person_df['x'].max())
x_gap = x_max - x_min
y_min = math.floor(person_df['y'].min())
y_max = math.ceil(person_df['y'].max())
y_gap = y_max - y_min
gap = x_gap if x_gap > y_gap else y_gap
axs[0, 1].set_xlim(x_min, x_min + gap)
axs[0, 1].set_ylim(y_min, y_min + gap)
axs[0, 1].set_aspect('equal')
axs[0, 1].invert_yaxis()
axs[0, 1].grid(True, alpha=0.3)
axs[0, 1].xaxis.set_major_locator(AutoLocator())
axs[0, 1].yaxis.set_major_locator(AutoLocator())
print(f"uid:{uid} 的資料筆數: {person_df.shape[0]}")

# 單人天數軌跡變化
ani_fig, ani_ax = plt.subplots()

ani_ax.set_xlim(x_min, x_min + gap)
ani_ax.set_ylim(y_min, y_min + gap)
x = person_df['x']
y = person_df['y']
days =  person_df['d']
time = person_df['t']
def init():
    ani_ax.clear()
    ani_ax.set_xlim(x_min, x_min + gap)
    ani_ax.set_ylim(y_min, y_min + gap)
    ani_ax.invert_yaxis()

def run(i):
    ani_ax.clear()
    ani_ax.set_xlim(x_min, x_min + gap)
    ani_ax.set_ylim(y_min, y_min + gap)
    ani_ax.invert_yaxis()

    window = 5  # 記憶幾個點
    for j in range(max(0, i - window + 1), i + 1):
        alpha = 0.1 + 0.9 * (j - max(0, i - window + 1)) / window  # 越舊越淡
        ani_ax.scatter(x.iloc[j], y.iloc[j], alpha=alpha, s=30, c='r')

    ani_ax.grid(True, alpha=0.3)
    ani_ax.xaxis.set_major_locator(AutoLocator())
    ani_ax.yaxis.set_major_locator(AutoLocator())
    ani_ax.set_title(f"第{days.iloc[i]}天 {time.iloc[i]*0.5}點鐘\nuid={uid} 的軌跡")

ani = anime.FuncAnimation(ani_fig, run, frames=person_df.shape[0], init_func=init, repeat=True)
# ani.save(f'UID:{uid}.gif', fps=12, writer='pillow')

# 不同時段的的全域heatmap

# Show the plot
plt.tight_layout()
plt.show()